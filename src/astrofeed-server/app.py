import sys
import signal
import threading
from flask import Flask, jsonify, request
from astrofeed_lib import config
from astrofeed_lib.database import db
from astrofeed_lib.algorithm import get_posts


app = Flask(__name__)


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    if db.is_closed():
        db.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()


@app.route('/')
def index():
    # Todo add debug links here which link to all services on this app, like /xrpc/app.bsky.feed.getFeedSkeleton?feed=...
    return 'Homepage of astronomy feeds on Bluesky. To be able to post in a feed, visit https://signup.astronomy.blue'


@app.route('/.well-known/did.json', methods=['GET'])
def did_json():
    if not config.SERVICE_DID.endswith(config.HOSTNAME):
        return '', 404

    return jsonify({
        '@context': ['https://www.w3.org/ns/did/v1'],
        'id': config.SERVICE_DID,
        'service': [
            {
                'id': '#bsky_fg',
                'type': 'BskyFeedGenerator',
                'serviceEndpoint': f'https://{config.HOSTNAME}'
            }
        ]
    })


@app.route('/xrpc/app.bsky.feed.describeFeedGenerator', methods=['GET'])
def describe_feed_generator():
    feeds = [{'uri': uri} for uri in config.FEED_URIS.values()]
    response = {
        'encoding': 'application/json',
        'body': {
            'did': config.SERVICE_DID,
            'feeds': feeds
        }
    }
    return jsonify(response)


@app.route('/xrpc/app.bsky.feed.getFeedSkeleton', methods=['GET'])
def get_feed_skeleton():
    feed = request.args.get('feed', default=None, type=str)

    # Convert any feeds with different external names to the internal name
    if feed in config.FEED_EXTERNAL_NAMES:
        feed = config.FEED_EXTERNAL_NAMES[feed]
    
    # Check that the feed is configured
    if feed not in config.FEED_URIS:
        return 'Unsupported algorithm', 400
    
    # Get the user's DID
    # try:
    #     authorization = request.headers['Authorization']
    # except Exception as e:
    #     authorization = None
    #     print("Authorization not in request header!")

    # if authorization is not None:
        

    # Query the algorithm
    try:
        cursor = request.args.get('cursor', default=None, type=str)
        limit = request.args.get('limit', default=20, type=int)
        body = get_posts(feed, cursor, limit)
    except ValueError:
        return 'Malformed cursor', 400
    
    # Add pinned instruction post
    # See: https://bsky.app/profile/did:plc:jcoy7v3a2t4rcfdh6i4kza25/post/3kc632qlmnm2j
    if cursor is None:
       body['feed'].insert(0, {"post": "at://did:plc:jcoy7v3a2t4rcfdh6i4kza25/app.bsky.feed.post/3kcfu7agwen2c"})

    return jsonify(body)
